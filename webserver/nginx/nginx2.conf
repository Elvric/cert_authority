stream{
    upstream caserver.imovies{
        server caserver.imovies:443
    }
    server {
        listen 443 ssl;
        server_name web.imovies;
        ssl_certificate /etc/nginx/ssl/web.pem;
        ssl_certificate_key /etc/nginx/ssl/web.key;

        # client certificate
        ssl_client_certificate /etc/nginx/ssl/ca-chain.pem;
        # make verification optional, so we can display a 403 message to those
        # who fail authentication
        ssl_verify_client optional;
            

        ssl_protocols TLSv1.2;

        root /var/www/html/;
        index index.html index.htm index.nginx-debian.html;

        underscores_in_headers on;
        # Serve React static files
        location / {
            # if uri exists, serve uri, otherwise respond 404
            try_files $uri $uri /index.html;
        }
        # this one is for login with cert => if ssl client auth fails we return an error (to be handled in react)
        # Redirect api requests to CA Server
        location /api/ {
            rewrite ^\/(.*) /$1 break;
            proxy_pass https://caserver.imovies;
            # TODO Ensure that the certificate from the caserver is verified
            proxy_ssl_trusted_certificate /etc/nginx/ssl/cacert.pem;
            proxy_ssl_verify on;
        }

        location /api/login_with_cert {
            if ($ssl_client_verify != "SUCCESS"){
                return 403 $ssl_client_verify;
            }
            proxy_set_header X-Custom-Referrer $ssl_client_serial;
            proxy_pass https://caserver.imovies/api/login_with_cert;
            # TODO Ensure that the certificate from the caserver is verified
            proxy_ssl_trusted_certificate /etc/nginx/ssl/cacert.pem;
            proxy_ssl_verify on;
        }
    }
}